// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Wool string

const (
	WoolCarpet Wool = "carpet"
	WoolMedium Wool = "medium"
	WoolLong   Wool = "long"
	WoolFur    Wool = "fur"
	WoolFine   Wool = "fine"
)

func (e *Wool) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Wool(s)
	case string:
		*e = Wool(s)
	default:
		return fmt.Errorf("unsupported scan type for Wool: %T", src)
	}
	return nil
}

type NullWool struct {
	Wool  Wool `json:"wool"`
	Valid bool `json:"valid"` // Valid is true if Wool is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWool) Scan(value interface{}) error {
	if value == nil {
		ns.Wool, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Wool.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWool) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Wool), nil
}

type Sheep struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Breed     string    `json:"breed"`
	Wool      Wool      `json:"wool"`
	Color     string    `json:"color"`
	CreatedAt time.Time `json:"created_at"`
}
